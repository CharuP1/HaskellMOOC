

In this video, we are going to find out about a powerful
automated testing tool called QuickCheck.
This allows us to run random tests on our code, to check
it meets certain properties that we specify

It's a powerful testing technique, used in the software
industry  (examples ...)

OK - suppose we want to implement a substitution cipher - 
let's do Caesar's cipher - where we encode letters by moving
them a certain number of spaces along in the alphabet

encipher :: [Char] -> Int -> [Char]
encipher [] shift = []
encipher c:cs shift 
  | isUpper(c) = let shiftedChar = ord(c) + shift
                     adjustedChar = if shiftedChar > ord('Z') then
shiftedChar-26 else shiftedChar
                 in chr(adjustedChar):(encipher cs shift)
  | isLower(c) = let shiftedChar = ord(c) + shift
                     adjustedChar = if shiftedChar > ord('z') then
shiftedChar-26 else shiftedChar
                 in chr(adjustedChar):(encipher cs shift)
  | otherwise = c:(encipher cs shift)



let decipher = \x y-> (encipher x (26-y))

Now, we want to check this works - (check).
Rather than devise a number of test cases, we will randomly generate input data 
(test case data) and check whether the property holds (an invariant)

for all x, y . decipher((encipher x y) y) = x

OK - run quickcheck
(defaults to 100 tests) - 

and we can trace them

run more than 100 ...

doesn't guarantee the code works - (Dijkstra quote) - but not a bad way to test...

Using QuickCheck

In this video, we are going to find out about a powerful
automated testing tool called QuickCheck.
This allows us to run randomly generated
tests on our code, to see whether
it meets certain properties that we specify.
QuickCheck comes as part of the Haskell platform, so you 
should already have access to it on your own machine.

It's a powerful testing technique, used in the software
industry - for instance lots of Telecoms software is
tested with QuickCheck.



OK - suppose we want to implement a substitution cipher - 
let's do Caesar's cipher - where we encode letters by moving
them a certain number of spaces along in the alphabet

import Data.Char

(add code from ciphers.hs)


great, we have shifted the letters along the right number of places...

e.g. let's try cipher "hello" 1
cipher "veni vidi vici" 3

(I know , I know,  this isn't correct code because it doesn't wrap around the alphabet, 
but bear with me for now...)

now - for the decipher, we want to shift letters back the same number of places - 

decipher = \x y -> (cipher (-x) y)

Now, we want to check this works properly - of course - 
we know it shouldn't..
Rather than devise a number of test cases, we will randomly generate 
input data 
(test case data) and check whether the correctness property holds.

for all x, y . decipher( x (cipher x y)) == y

first we import the QuickCheck module

import Test.QuickCheck

then we ask to check our property

quickCheck ((\n->(\s -> ((decipher n (cipher n s))==s))) :: [Char] -> Int -> Bool)

This is the call to quickcheck - note that we have to write a lambda expression that takes two arguments - the string s and the int n - we have supplied the types for these, then 


OK - run quickcheck
(defaults to 100 tests) - 

and we can trace this, to see what the randomly generated
input data looks like
verbosecheck

#run more than 100 ...
#deepcheck ???

If the property is correct for all tests, this doesn't guarantee the code works.
Edsger  Dijkstra, a famous Computer Scientist,  said 'testing can only show the presence of bugs, not their absence'. 
However QuickCheck provides a nice way to generate automated random tests.


ok - let's write a correct Caesar's cipher program.
We need to check that we wrap round the alphabet, from z to a ... onwards.

(add in code here)

and now we can run QuickCheck on this - test the property again...


Great - we pass all the tests this time!
In the next article, we are going to explore QuickCheck in more detail.

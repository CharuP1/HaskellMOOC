
### We already know about monads

Functional programming languages
have a reputation for
using complex concepts --- this
is probably deserved but it may be 
discouraging to beginner programmers.

One of the main Haskell features that puts people off is the concept
of *monads*. In this week's activity, we are going to delve into the `mystery
of monads' in detail.

For now, let's start off with the following high-level definition ---
monads allow sequencing of function calls to be enforced
by the type system.

is that enough? Maybe not?

OK - so remember that we have already seen at least two
examples of monads.

### The IO Monad

In week 2 of the course, we studied IO actions like `putStrLn`
and `getLine`. We looked at the `do` construct for ordering
these actions. This is the IO monad - inside the do construct.
The type is IO (something).

### The Maybe Monad

In week 3 of the course, we studied Maybe values, i.e. Just x or
Nothing --- which are used to represent values from
computations that may fail.
Again, we can use `do` to order a sequence of
computations on Maybe values. This is the Maybe monad.

### General Monads

We are going to think about the properties of monads in the next few
steps --- to try and generalize the concept. However it is moderately
reassuring to think that we have already encountered monadic
computation in Haskell and understood how it works, at some level.


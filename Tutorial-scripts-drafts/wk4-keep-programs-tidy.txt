Keep your programs tidy!

(photo of Lego bricks? some scattered - then tidy?)

Scoping is an important way to keep your programs tidy.
It involves limiting the region of the program in which 
names 'exist' and can be used.

In Haskell, a let expression provides local scope.
A let expression has a series of equations defining
variable values and a final expression 
(after the in keyword) that computes a value 
with those variables in scope.

Here is an example

let x = 2
in x*x

This expression evaluates to 4.

Multiple variables can be defined in a single let

let x = 2
    y = 3
in x+y


This expression evaluates to 5. 
Note that the variable names line up 
underneath one another
This is good formatting practice, but is also needed
for Haskell to interpret the code correctly.
Like Python, whitespace is important in Haskell -
certainly in let expressions anyway!

(whitespace matters placard)

2nd def depends on first
journeycost :: Float -> Float -> Float
journeycost miles fuelcostperlitre = 
 let milespergallon = 35
     litrespergallon = 4.55
     gallons = miles/milespergallon
 in (gallons*litrespergallon*fuelcostperlitre)


let diameter = 2*radius
    circumference = pi*diameter
in (diameter, circumference)

What about recursive definitions?


Where clauses

There is another syntax for introducing local variables, called
the where clause.
As we have seen, Haskell is a swiss army knife of a programming langauage, there are lots of ways of doing things.

where is the keyword, inside an equation, provides
definitions for variables that are used in the equation

Here are a couple of examples

squareplusone :: Int -> Int
sumsquares x = xsquared + 1
  where xsquared = x*x

where must be indented more than the start of the
enclosing equation.

Can have multiple variables in where - agin

cel2fahr :: Float -> Float
cel2fahr x = (x*scalingfactor) + freezingpoint
  where scalingfactor = 9.0/5.0
        freezingpoint = 32

again, notice that the variables defined in the where clause all
line up underneath each other.



You might think let and where are very similar!
* Both introduce a local scope.
* Both allow any number of equations to be written.
* Both allow the equations to be written in any order, and variables defined in any equation can be used (“are in scope”) in the other
equations. 

However there are some important differences:
* let expressions are expressions; let can be used anywhere an expression is allowed.
* where clauses are not expressions; they can be used only to provide some local variables for a top level equation.


